stages:
  - build
  - deploy
  - dismiss
  - cleanup

variables:
  WERF_IMAGES_REPO_MODE: monorepo
  GIT_SUBMODULE_STRATEGY: recursive
  GIT_SUBMODULE_DEPTH: 1
  DOCKER_REGISTRY: docker.io
  BASE_URL: 62.84.114.132.sslip.io

.init_werf_script: &init_werf_script
  - source $(werf ci-env gitlab --as-file)
  - werf cr login -u ${CI_DOCKER_HUB_USER} -p ${CI_DOCKER_HUB_PASSWORD} ${DOCKER_REGISTRY}
  - werf cr login -u ${CI_DEPENDENCY_PROXY_USER} -p ${CI_DEPENDENCY_PROXY_PASSWORD} ${CI_DEPENDENCY_PROXY_SERVER}

.base_werf:
  image:
    name: registry.werf.io/werf/werf:1.2
  before_script:
    - *init_werf_script

.deploy_script: &deploy_script
  - |
    werf kubectl config use-context gitlab-instance-711bf56d/sockshop:k8s-4otus-agent
    werf kubectl config current-context
    env
  - |
    werf kubectl create namespace ${KUBE_NAMESPACE} || true
    werf kubectl -n ${KUBE_NAMESPACE} create secret docker-registry gitlab-credentials --docker-server="${CI_REGISTRY}" --docker-username="${CI_REGISTRY_USER}" --docker-password="${CI_REGISTRY_PASSWORD}" --docker-email="${GITLAB_USER_EMAIL}" -o yaml --dry-run=client | werf kubectl apply -f -
    werf kubectl -n ${KUBE_NAMESPACE} patch serviceaccount default -p '{"imagePullSecrets": [ { "name": "gitlab-credentials" } ] }'
  - >
    werf converge --skip-build
    --set "global.envUrl=$(echo ${CI_ENVIRONMENT_URL} | cut -d / -f 3)"
    --set "global.app.namespace=${KUBE_NAMESPACE}"

.base_deploy:
  extends: .base_werf
  variables:
    KUBE_NAMESPACE: ${CI_PROJECT_NAME}-${CI_ENVIRONMENT_NAME}
  stage: deploy
  environment:
    name: ${CI_COMMIT_REF_SLUG}
    url: ${URL_SCHEMA}://${CI_PROJECT_NAME}-${CI_ENVIRONMENT_NAME}.${URL_HOST}
  script:
    - *deploy_script
  dependencies:
    - Build and Publish

Build and Publish:
  extends: .base_werf
  stage: build
  script:
    - werf build
  rules:
    - if: $CI_PIPELINE_SOURCE != "schedule"

Review:
  extends: .base_deploy
  environment:
    name: ${CI_COMMIT_REF_SLUG}
    url: http://${CI_PROJECT_NAME}-${CI_COMMIT_REF_SLUG}.${BASE_URL}
    on_stop: Stop Review
    auto_stop_in: 1 day
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

Stop Review:
  extends: .base_werf
  variables:
    KUBE_NAMESPACE: ${CI_PROJECT_NAME}-${CI_ENVIRONMENT_NAME}
    GIT_STRATEGY: none
  stage: dismiss
  script:
    - werf kubectl config use-context gitlab-instance-711bf56d/sockshop:k8s-4otus-agent
    - werf kubectl config current-context
    - werf dismiss --namespace ${KUBE_NAMESPACE} --with-namespace --release=${KUBE_NAMESPACE}
  environment:
    name: ${CI_COMMIT_REF_SLUG}
    action: stop
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  when: manual

Deploy to Staging:
  extends: .base_deploy
  environment:
    name: staging
    url: http://${CI_PROJECT_NAME}.${BASE_URL}
  rules:
    - if: $CI_PIPELINE_SOURCE != "schedule" && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

Deploy to Production:
  extends: .base_deploy
  environment:
    name: production
    url: https://production.${BASE_URL}
    kubernetes:
      namespace: ${CI_PROJECT_PATH_SLUG}-production
  rules:
    - if: $CI_PIPELINE_SOURCE != "schedule" && $CI_COMMIT_TAG != null

Cleanup:
  extends: .base_werf
  stage: cleanup
  script:
    - werf cr login -u nobody -p ${WERF_IMAGES_CLEANUP_PASSWORD} ${WERF_REPO}
    - werf cleanup
  #  when: always
  only: [schedules]

